//
//  RegexUnit.swift
//  Beeline
//
//  Created by Karl Bowden on 5/01/2016.
//  Copyright Â© 2016 Featherweight Labs. All rights reserved.
//

import XCTest
@testable import Beeline

class RegexUnit: XCTestCase {

    func testMatches() {
        let regex = Regex(pattern: "^something$")
        XCTAssertEqual(regex.matches("something").count, 1)
        XCTAssertEqual(regex.matches("SOMETHING").count, 0)
        XCTAssertEqual(regex.matches("somethin-").count, 0)
        XCTAssertEqual(regex.matches("-omething").count, 0)

        XCTAssertEqual(Regex(pattern: "^some").matches("something").count, 1)
        XCTAssertEqual(Regex(pattern: "thing$").matches("something").count, 1)
        XCTAssertEqual(Regex(pattern: "et").matches("something").count, 1)
    }

    func testMatchesEmoji() {
        let regex = Regex(pattern: "^sunðŸ˜Žglasses$")
        XCTAssertEqual(regex.matches("sunðŸ˜Žglasses").count, 1)
        XCTAssertEqual(regex.matches("sunðŸ’€glasses").count, 0)
    }

    func testMatch() {
        let regex = Regex(pattern: "^something$")
        XCTAssertEqual(regex.match("something")!, "something")
        XCTAssertNil(regex.match("SOMETHING"))
        XCTAssertNil(regex.match("somethin-"))
        XCTAssertNil(regex.match("-omething"))
        XCTAssertEqual(Regex(pattern: "^MOCK").match("MOCKSTRING")!, "MOCK")
    }

    func testMatchEmoji() {
        XCTAssertEqual(Regex(pattern: "^sunðŸ˜Žglasses$").match("sunðŸ˜Žglasses"), "sunðŸ˜Žglasses")
    }

    func testReplace() {
        let regex = Regex(pattern: "^/{0,1}somepath/{0,1}")
        let remainder = regex.replace("somepath/remainder") ?? ""

        XCTAssertEqual(remainder, "remainder")
        XCTAssertEqual(regex.replace("/somepath/") ?? "NOPE", "")
    }

    func testReplaceEmoji() {
        XCTAssertEqual(Regex(pattern: "ðŸ˜Ž").replace("ðŸ˜Ž"), "")
        XCTAssertEqual(Regex(pattern: "^sunðŸ˜Ž").replace("sunðŸ˜Žglasses"), "glasses")
        XCTAssertEqual(Regex(pattern: "ðŸ˜Žglasses").replace("sunðŸ˜Žglasses"), "sun")
        XCTAssertEqual(Regex(pattern: "^sun").replace("sunðŸ˜Žglasses"), "ðŸ˜Žglasses")
    }
}
